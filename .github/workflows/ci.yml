name: iaito CI

env:
  R2V: 5.7.0

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  acr-linux-r2git:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8.x
    - name: apt dependencies
      run: |
        sudo apt-get update
        sudo apt install -y libgraphviz-dev mesa-common-dev ninja-build meson
        sudo apt install -y libqt5svg5-dev qttools5-dev qttools5-dev-tools
        sudo apt install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
    - name: install r2
      run: git clone --depth=1 https://github.com/radareorg/radare2 r2git && r2git/sys/install.sh
    - name: build iaito
      run: |
        ./configure --prefix=/usr
        make -j4
    - name: packaging
      run: |
        make -j -C dist/debian
    - uses: actions/upload-artifact@v2
      with:
        name: iaito-amd64.deb
        path: dist/debian/*/*.deb
  acr-linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8.x
    - name: apt dependencies
      run: |
        sudo apt-get update
        sudo apt install -y libgraphviz-dev mesa-common-dev ninja-build
        sudo apt install -y libqt5svg5-dev qttools5-dev qttools5-dev-tools
        sudo apt install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
    - name: install r2
      run: |
        wget -q https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2_${{env.R2V}}_amd64.deb
        wget -q https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2-dev_${{env.R2V}}_amd64.deb
        sudo dpkg -i *.deb
    - name: build iaito
      run: |
        ./configure --prefix=/usr
        make -j4
    - name: packaging
      run: |
        make -C dist/debian
    - uses: actions/upload-artifact@v2
      with:
        name: iaito-amd64.deb
        path: dist/debian/*/*.deb
  acr-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8.x
    - name: homebrew dependencies
      run: |
        brew update
        brew install coreutils pkg-config qt@5
        brew unlink qt@5 || true
        brew link --force qt@5
        pip3 install meson
    - name: install r2
      run: |
        wget -q https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2-${{env.R2V}}.pkg
        sudo installer -pkg *.pkg -target /
    - name: build iaito
      run: |
        export PATH="/usr/local/opt/qt@5/bin:$PATH"
        export PATH="/opt/homebrew/opt/qt@5/bin:$PATH" # doesnt seems to be necessary
        export LDFLAGS="-L/usr/local/opt/qt@5/lib"
        export CPPFLAGS="-I/usr/local/opt/qt@5/include"
        export PKG_CONFIG_PATH="/usr/local/opt/qt@5/lib/pkgconfig"
        ./configure
        make -j4
    - name: packaging
      run: |
        make -C dist/macos
    - uses: actions/upload-artifact@v2
      with:
        name: iaito-mac-amd64.zip
        path: dist/macos/iaito*.zip
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, ubuntu-18.04, macos-latest, windows-latest]
        python-version: [3.8.x]
        system-deps: [true]
        cc-override: [default]
        cxx-override: [default]
      # Prevent one job from pausing the rest
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - name: apt dependencies
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install libgraphviz-dev mesa-common-dev
        sudo apt-get install ninja-build make git patch wget
        sudo apt install -y libqt5svg5-dev qttools5-dev qttools5-dev-tools
        sudo apt install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
    - name: install r2
      run: git clone --depth=1 https://github.com/radareorg/radare2 r2git && r2git/sys/install.sh
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: homebrew dependencies
      if: contains(matrix.os, 'macos')
      run: |
        rm '/usr/local/bin/2to3' # symlink to some kind of existing python2.7 installation conflicts with brew python3 which gets installed as indirect dependency
        brew update --preinstall # temporary workaround for https://github.com/Homebrew/homebrew-bundle/issues/751
        brew bundle
        brew install coreutils
        brew install pkg-config
    - name: py dependencies
      run: |
        pip install meson
    - uses: actions/upload-artifact@v2
      if: contains(matrix.os, 'ubuntu')
      with:
        name: iaito_amd64.deb
        path: dist/debian/*/*.deb
    - name: meson+ninja ubuntu
      if: contains(matrix.os, 'ubuntu')
      run: |
        set -euo pipefail #TODO: move to top once iaito-deps doesn't fail
        if [[ "${{ matrix.cc-override }}" != "default" ]]
        then
          export CC="${{matrix.cc-override}}"
          export CXX="${{matrix.cxx-override}}"
        fi
        cd src
        meson ../build
        cd ../build
        ninja
#    - name: cmake macos
#      shell: bash
#      if: contains(matrix.os, 'macos')
#      run: |
#        set -euo pipefail
#        wget -q https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2-${{env.R2V}}.pkg
#        sudo installer -pkg *.pkg -target /
#        export PATH=/usr/local/opt/llvm/bin:$PATH
#        mkdir build
#        cd build
#        cmake \
#                -DCMAKE_BUILD_TYPE=Release \
#                -DIAITO_ENABLE_PYTHON=ON \
#                -DIAITO_ENABLE_PYTHON_BINDINGS=OFF \
#                -DIAITO_ENABLE_CRASH_REPORTS=ON \
#                -DIAITO_USE_BUNDLED_RADARE2=ON \
#                -DIAITO_ENABLE_PACKAGING=ON \
#                -DIAITO_PACKAGE_DEPENDENCIES=ON \
#                -DIAITO_ENABLE_DEPENDENCY_DOWNLOADS=ON \
#                ../src && \
#              make -j4;
#        make package
#        export IAITO_VERSION=$(python3 ../scripts/get_version.py)
#        echo PACKAGE_NAME=iaito-mac.tar.gz >> $GITHUB_ENV
#        cd .. && make -C dist/macos
#    - uses: actions/upload-artifact@v2
#      if: contains(matrix.os, 'macos')
#      with:
#        name: iaito-mac.pkg
#        path: dist/macos/macos-pkg/*.pkg
#    - name: windows dependencies
#      if: contains(matrix.os, 'windows-latest')
#      shell: bash
#      run: |
#        pip install ninja
#        scripts/fetch_deps.sh
#        choco install winflexbison3
  w64-make:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8.x
    - name: w64-make
      shell: cmd
      run: |
        set IAITO_DEPS=%CD%\iaito-deps
        set PATH=%CD%\iaito-deps\qt\bin;%CD%\r2_dist\bin;%PATH%
        call preconfigure.bat
        call configure.bat
        call make.bat
    - uses: actions/upload-artifact@v2
      if: env.PACKAGE_NAME != null
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: build/${{ env.PACKAGE_NAME }}
  w64-cmake:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8.x
    - name: w64-cmake
      shell: cmd
      run: |
        set IAITO_DEPS=%CD%\iaito-deps
        set PATH=%CD%\iaito-deps\qt\bin;%CD%\r2_dist\bin;%PATH%
        call preconfigure.bat
        cd
        mkdir build
        cd build
        set PACKAGE_NAME=iaito-w64
        cmake ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DIAITO_PACKAGE_DEPENDENCIES=ON ^
          -DIAITO_ENABLE_DEPENDENCY_DOWNLOADS=ON ^
          -DIAITO_ENABLE_CRASH_REPORTS=OFF ^
          -DCMAKE_PREFIX_PATH="%IAITO_DEPS%\pyside" ^
          -DCPACK_PACKAGE_FILE_NAME=%PACKAGE_NAME% ^
          -G Ninja ^
          ../src
        cmake --build . --config Release
        cmake --build . --config Release --target package
        echo PACKAGE_NAME=%PACKAGE_NAME%.zip >> %GITHUB_ENV%
    # -DIAITO_ENABLE_PYTHON=ON ^
    # -DIAITO_ENABLE_PYTHON_BINDINGS=ON ^
    - uses: actions/upload-artifact@v2
      if: env.PACKAGE_NAME != null
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: build/${{ env.PACKAGE_NAME }}
