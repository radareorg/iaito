name: iaito CI

env:
  R2V: 6.0.0

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  acr-linux-r2git:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.x
    - name: apt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgraphviz-dev mesa-common-dev ninja-build meson libqt5svg5-dev qttools5-dev qttools5-dev-tools qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
    - name: install r2
      run: git clone --depth=1 https://github.com/radareorg/radare2 r2git && CFLAGS=-O0 r2git/sys/install.sh
    - name: build iaito
      run: |
        ./configure --prefix=/usr
        make -j4
    - name: packaging
      run: make -j -C dist/debian
  indent-check:
    runs-on: ubuntu-24.04
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.x
    - name: Install clang-format 18
      run: |
        sudo apt-get update
        sudo apt-get install clang-format-18
        sudo apt-get install -y libgraphviz-dev mesa-common-dev ninja-build libqt5svg5-dev qttools5-dev qttools5-dev-tools qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
    - name: install r2
      run: |
        wget -q https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2_${{env.R2V}}_amd64.deb
        wget -q https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2-dev_${{env.R2V}}_amd64.deb
        sudo dpkg -i *.deb
    - name: configure iaito
      run: ./configure --prefix=/usr
    - name: make indent
      run: make indent && git diff --exit-code
  acr-linux:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.x
    - name: apt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgraphviz-dev mesa-common-dev ninja-build libqt5svg5-dev qttools5-dev qttools5-dev-tools qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
    - name: install r2
      run: |
        wget -q https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2_${{env.R2V}}_amd64.deb
        wget -q https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2-dev_${{env.R2V}}_amd64.deb
        sudo dpkg -i *.deb
    - name: configure iaito
      run: ./configure --prefix=/usr
    - name: build iaito
      run: make -j4
    - name: packaging
      run: make -C dist/debian
    - uses: actions/upload-artifact@v4
      with:
        name: iaito-amd64.deb
        path: dist/debian/*/*.deb
  acr-macos:
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: arm64
            macos: latest
          - arch: x64
            macos: 13
    runs-on: macos-${{ matrix.macos }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.x
    - name: uname
      run: uname -a
    - name: install dependencies
      run: |
        brew install qt@5
        echo $(brew --prefix qt@5)/bin >> $GITHUB_PATH
        pip3 install meson ninja
    - name: install r2
      working-directory: dist/macos
      run: |
        curl -Lo radare2.pkg "https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2-${{ matrix.arch }}-${{env.R2V}}.pkg"
        sudo installer -pkg radare2.pkg -target /
    - name: download extra deps
      env:
        GH_TOKEN: ${{ github.token }}
      run: make -C dist/macos extra
    - name: build iaito
      run: |
        ./configure
        make -j4 -C dist/macos app
    - name: ad-hoc sign
      run: codesign --force --deep -s - dist/macos/disk/iaito.app
    - name: packaging
      run: make -C dist/macos zip
    - uses: actions/upload-artifact@v4
      with:
        name: iaito-macos-${{ matrix.arch }}
        path: dist/macos/iaito.zip
  meson:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        python-version: [3.12.x]
        system-deps: [true]
        cc-override: [default]
        cxx-override: [default]
      # Prevent one job from pausing the rest
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false # 'recursive' 'true' or 'false'
        persist-credentials: false
    - name: apt dependencies
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y libgraphviz-dev mesa-common-dev ninja-build libqt5svg5-dev qttools5-dev qttools5-dev-tools qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
    - name: install r2
      run: git clone --depth=1 https://github.com/radareorg/radare2 r2git && CFLAGS=-O0 r2git/sys/install.sh
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: install dependencies
      if: contains(matrix.os, 'macos')
      run: |
        brew install qt@5
        echo $(brew --prefix qt@5)/bin >> $GITHUB_PATH
        pip3 install meson ninja
    - name: macos build
      if: contains(matrix.os, 'macos')
      run: |
        meson setup -Dwith_qt6=true build src
        ninja -C build -j4
    - name: meson+ninja ubuntu
      if: contains(matrix.os, 'ubuntu')
      run: |
        pip install meson
        meson setup build src
        ninja -C build -j4
  w64-meson:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
        persist-credentials: false
    - name: Preparing msvc toolchain
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    - name: install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: 6.8.*
    - name: install dependencies
      shell: cmd
      run: pip install ninja meson
    - name: install r2 (preconfigure)
      shell: bash
      run: |
        curl -L -o r2.zip https://github.com/radareorg/radare2/releases/download/${{env.R2V}}/radare2-${{env.R2V}}-w64.zip
        7z x r2.zip
        mv radare2-${{env.R2V}}-w64 radare2
        cp -f radare2/include/libr/r_util/r_event.h radare2/include/libr/r_event.h || true # workarround fixed on radareorg/radare2@266319b0902603545d94dc35f9c4404b0a2b3a36
        echo "%CD%\radare2\bin" >> $GITHUB_PATH
    - name: configure
      shell: cmd
      run: configure.bat
    - name: make
      shell: cmd
      env:
        ARCH: x64
      run: make.bat -Dwith_qt6=true
    - name: dist
      shell: cmd
      run: 7z a iaito.zip iaito
    - uses: actions/upload-artifact@v4
      with:
        name: iaito-w64.exe
        path: iaito\iaito.exe
    - uses: actions/upload-artifact@v4
      with:
        name: iaito-w64.zip
        path: iaito.zip

  check_release:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    outputs:
      is_release: ${{ steps.release.outputs.is }}
      tag_name: ${{ steps.release.outputs.tag }}
    needs:
      - acr-linux
      - acr-macos
      - w64-meson
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Download all git history and tags
      - name: Check if is a release
        run: git describe --exact-match --tags ${{ github.sha }} | awk 'BEGIN{tag="-";r="no"}/^[0-9]+\.[0-9]+/{tag=$0;r="yes"};END{print "is="r;print "tag="tag}' >> ${GITHUB_OUTPUT}
        id: release

  macos-sign:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.check_release.outputs.is_release == 'yes' }}
    needs:
      - check_release
    runs-on: macos-latest
    environment: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: iaito-macos-*
          path: dist/artifacts
       
      - name: Install Apple Certificate
        env:
          CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: "keychainpass-${{ github.run_id }}"
        run: |
          # Create keychain
          security create-keychain -p "${KEYCHAIN_PASSWORD}" release.keychain
          security default-keychain -s release.keychain
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" release.keychain
          security set-keychain-settings -t 3600 -u release.keychain
          
          # Import certificate
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k release.keychain -P "${CERTIFICATE_PASSWORD}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "${KEYCHAIN_PASSWORD}" release.keychain
          
          # Check if the certificate was imported correctly and find its identity
          security find-identity -v -p codesigning release.keychain
          
          # Clean up
          rm certificate.p12

      - name: Sign and package the App Bundle
        run: |
          # Find the Developer ID Application certificate identity
          IDENTITY=$(security find-identity -v -p codesigning | awk '/Developer ID Application/{print $2;exit}')
          
          if [ -z "$IDENTITY" ]; then
            echo "Error: No Developer ID Application certificate found in keychain"
            exit 1
          fi

          # Sign and package for all architectures
          for arch in arm64 x64; do
            echo "[${arch}] Extracting build..."
            mkdir -p dist/macos/disk
            ditto -x -k dist/artifacts/iaito-macos-${arch}/iaito.zip dist/macos/disk/

            echo "[${arch}] Signing app bundle..."
            codesign --force --deep --options runtime --entitlements "dist/macos/iaito.entitlements" --sign "$IDENTITY" dist/macos/disk/iaito.app
            codesign --verify --verbose dist/macos/disk/iaito.app
  
            echo "[${arch}] Packaging into DMG..."
            rm -v dist/macos/disk/READ*.txt # no workaround needed
            ln -fs /Applications dist/macos/disk/
            (cd dist/macos; hdiutil create -format UDZO -fs APFS -volname iaito -srcfolder disk iaito)
            mv -v dist/macos/iaito.dmg "iaito-${arch}.dmg"
            rm -fR dist/macos/disk
  
            echo "[${arch}] Signing DMG..."
            codesign --force --sign "$IDENTITY" --timestamp "iaito-${arch}.dmg"
          done

      - name: Notarize DMG
        env:
          APPLE_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          for arch in arm64 x64; do
            echo "[${arch}] Notary DMG..."
            xcrun notarytool submit "iaito-${arch}.dmg" --apple-id "$APPLE_ID" --team-id "$TEAM_ID" --password "$APP_PASSWORD" --wait
            xcrun stapler staple "iaito-${arch}.dmg"
          done

      - uses: actions/upload-artifact@v4
        with:
          name: iaito-arm64.dmg
          path: iaito-arm64.dmg

      - uses: actions/upload-artifact@v4
        with:
          name: iaito-x64.dmg
          path: iaito-x64.dmg

  release:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.check_release.outputs.is_release == 'yes' }}
    needs:
      - macos-sign
      - check_release
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Download all git history and tags
      - name: Extract version
        run: echo "string=`./configure -qV`" >> $GITHUB_OUTPUT
        id: version
      - name: Prepare release notes
        run: ./scripts/release-notes.sh | tee ./RELEASE_NOTES.md
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/artifacts
      - name: Display structure of downloaded files
        run: find dist/artifacts
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check_release.outputs.tag_name }}
          release_name: ${{ steps.version.outputs.string }}
          body_path: ./RELEASE_NOTES.md
          draft: false
          prerelease: false
      - name: Prepare release notes
        run: ./scripts/release-notes.sh | tee ./RELEASE_NOTES.md
      - name: Upload Linux asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/artifacts/iaito-amd64.deb/iaito/iaito_${{ steps.version.outputs.string }}_amd64.deb
          asset_name: iaito_${{ steps.version.outputs.string }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload macOS x64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/artifacts/iaito-x64.dmg/iaito-x64.dmg
          asset_name: iaito_${{ steps.version.outputs.string }}_x64.dmg
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload macOS arm64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/artifacts/iaito-arm64.dmg/iaito-arm64.dmg
          asset_name: iaito_${{ steps.version.outputs.string }}_arm64.dmg
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload Windows QtDeploy asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/artifacts/iaito-w64.zip/iaito.zip
          asset_name: iaito-${{ steps.version.outputs.string }}-w64.zip
          asset_content_type: application/zip
      - name: Upload Windows executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/artifacts/iaito-w64.exe/iaito.exe
          asset_name: iaito-${{ steps.version.outputs.string }}.exe
          asset_content_type: application/zip
